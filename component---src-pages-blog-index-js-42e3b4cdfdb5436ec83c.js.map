{"version":3,"sources":["webpack:///./src/components/header.js","webpack:///./src/pages/blog/index.js","webpack:///./src/components/blogindexlayout.js","webpack:///./src/components/seo.js"],"names":["Header","id","className","BlogIndex","render","posts","this","props","data","allMdx","edges","title","keywords","map","node","frontmatter","fields","slug","key","to","dangerouslySetInnerHTML","__html","excerpt","alt","src","avatar","author","date","React","Component","Layout","children","SEO","description","lang","meta","query","detailsQuery","metaDescription","site","siteMetadata","htmlAttributes","titleTemplate","name","content","property","concat","length","join","defaultProps"],"mappings":"2FAAA,uEAEe,SAASA,IACtB,OACE,yBAAKC,GAAG,SAASC,UAAU,4BACzB,yBAAKD,GAAG,SAASC,UAAU,qBACzB,yBAAKA,UAAU,uBACb,kBAAC,IAAD,W,kHCFJC,E,kGACJC,OAAA,WAAU,IAEFC,EADWC,KAAKC,MAAdC,KACWC,OAAOC,MAE1B,OACE,6BACE,kBAAC,IAAD,CACEC,MAAM,YACNC,SAAU,CAAC,OAAD,oEAEZ,kBAAC,IAAD,KACA,yBAAKV,UAAU,mBACX,yBAAKA,UAAU,qDACX,yBAAKA,UAAU,8CACX,yBAAKA,UAAU,SACX,uBAAGA,UAAU,0BAAb,QAGA,uBAAGA,UAAU,4BAAb,0CAKR,yBAAKA,UAAU,6DACVG,EAAMQ,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACNH,EAAQG,EAAKC,YAAYJ,OAASG,EAAKE,OAAOC,KACpD,OACE,yBAAKC,IAAKJ,EAAKE,OAAOC,KAAMf,UAAU,qEACpC,kBAAC,OAAD,CAAMiB,GAAIL,EAAKE,OAAOC,KAAMf,UAAU,uBAClC,yBAAKA,UAAU,wCACX,uBAAGA,UAAU,6EACVS,GAEH,uBAAGS,wBAAyB,CAAEC,OAAQP,EAAKQ,SAAWpB,UAAU,wDAEhE,yBAAKA,UAAU,0BACX,0BAAMA,UAAU,kBACZ,yBAAKqB,IAAI,SAASC,IAAKV,EAAKC,YAAYU,OAAQvB,UAAU,kDAE9D,yBAAKA,UAAU,8CACX,uBAAGA,UAAU,iBACTY,EAAKC,YAAYW,QAErB,uBAAGxB,UAAU,iBACTY,EAAKC,YAAYY,oB,GA7CvCC,IAAMC,WA8Df1B,a,+FC/DT2B,E,kGACJ1B,OAAA,WAAU,IACA2B,EAAazB,KAAKC,MAAlBwB,SACR,OACE,6BACE,kBAAC,IAAD,MACEA,EACF,kBAAC,IAAD,Q,GAPaH,IAAMC,WAaZC,O,kCCjBf,iDAKA,SAASE,EAAT,GAA4D,IAA7CC,EAA4C,EAA5CA,YAAaC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,KAAMvB,EAAmB,EAAnBA,SAAUD,EAAS,EAATA,MAChD,OACE,kBAAC,cAAD,CACEyB,MAAOC,EACPjC,OAAQ,SAAAI,GACN,IAAM8B,EACJL,GAAezB,EAAK+B,KAAKC,aAAaP,YACxC,OACE,kBAAC,IAAD,CACEQ,eAAgB,CACdP,QAEFvB,MAAOA,EACP+B,cAAa,QAAUlC,EAAK+B,KAAKC,aAAa7B,MAC9CwB,KAAM,CACJ,CACEQ,KAAK,cACLC,QAASN,GAEX,CACEO,SAAS,WACTD,QAASjC,GAEX,CACEkC,SAAS,iBACTD,QAASN,GAEX,CACEO,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,QAASpC,EAAK+B,KAAKC,aAAad,QAElC,CACEiB,KAAK,gBACLC,QAASjC,GAEX,CACEgC,KAAK,sBACLC,QAASN,IAGVQ,OACClC,EAASmC,OAAS,EACd,CACEJ,KAAK,WACLC,QAAShC,EAASoC,KAAT,OAEX,IAELF,OAAOX,QAQtBH,EAAIiB,aAAe,CACjBf,KAAK,KACLC,KAAM,GACNvB,SAAU,IAWGoB,MAEf,IAAMK,EAAY","file":"component---src-pages-blog-index-js-42e3b4cdfdb5436ec83c.js","sourcesContent":["import React from \"react\"\nimport Nav from \"../components/nav\"\nexport default function Header() {\n  return ( \n    <div id=\"header\" className=\"relative overflow-hidden\">\n      <div id=\"banner\" className=\"max-w-7xl mx-auto\">\n        <div className=\"relative z-10 pb-10\">\n          <Nav />\n        </div>\n      </div>\n    </div>\n  )\n}","import React from 'react'\nimport { Link, graphql } from 'gatsby'\nimport SEO from '../../components/seo'\nimport Layout from '../../components/blogindexlayout'\n\nclass BlogIndex extends React.Component {\n  render() {\n    const { data } = this.props\n    const posts = data.allMdx.edges\n\n    return (\n      <div>\n        <SEO\n          title=\"All posts\"\n          keywords={[`blog`, `WebNN`, `WebNN API`, `Web Neural Networks`, `Web Machine Learning`]}\n        />\n        <Layout>\n        <div className=\"py-6 bg-nn-bgg1\">\n            <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 blog-index\">\n                <div className=\"header flex items-end justify-between mb-6\">\n                    <div className=\"title\">\n                        <p className=\"text-2xl text-gray-800\">\n                            Blog\n                    </p>\n                        <p className=\"font-light text-gray-400\">\n                            Get latest articles about WebNN API.\n                    </p>\n                    </div>\n                </div>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-2 gap-6 mb-4\">\n                    {posts.map(({ node }) => {\n                      const title = node.frontmatter.title || node.fields.slug\n                      return (\n                        <div key={node.fields.slug} className=\"overflow-hidden shadow-sm rounded-sm w-full cursor-pointer m-auto\">\n                          <Link to={node.fields.slug} className=\"w-full block h-full\">\n                              <div className=\"bg-white dark:bg-gray-800 w-full p-4\">\n                                  <p className=\"text-nn-t1 text-xl font-medium mb-2 h-6 overflow-hidden overflow-ellipsis\">\n                                    {title}\n                                  </p>\n                                  <p dangerouslySetInnerHTML={{ __html: node.excerpt }} className=\"text-gray-400 dark:text-gray-300 font-light text-md\">\n                                  </p>\n                                  <div className=\"flex items-center mt-4\">\n                                      <span className=\"block relative\">\n                                          <img alt=\"profil\" src={node.frontmatter.avatar} className=\"mx-auto object-cover rounded-full h-10 w-10 \" />\n                                      </span>\n                                      <div className=\"flex flex-col justify-between ml-4 text-sm\">\n                                          <p className=\"text-gray-800\">\n                                            { node.frontmatter.author }\n                                          </p>\n                                          <p className=\"text-gray-400\">\n                                            { node.frontmatter.date }\n                                          </p>\n                                      </div>\n                                  </div>\n                              </div>\n                          </Link>\n                        </div>\n                      )\n                    })}\n                </div>\n              </div>\n            </div>\n          </Layout>\n        </div>\n    )\n  }\n}\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    allMdx(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            avatar\n            author\n          }\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\nimport Header from \"./header\"\nimport Footer from \"./footer\"\n\nclass Layout extends React.Component {\n  render() {\n    const { children } = this.props\n    return (\n      <div>\n        <Header />\n        { children}\n        <Footer />\n      </div>\n    )\n  }\n}\n\nexport default Layout\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { StaticQuery, graphql } from 'gatsby'\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  return (\n    <StaticQuery\n      query={detailsQuery}\n      render={data => {\n        const metaDescription =\n          description || data.site.siteMetadata.description\n        return (\n          <Helmet\n            htmlAttributes={{\n              lang,\n            }}\n            title={title}\n            titleTemplate={`%s | ${data.site.siteMetadata.title}`}\n            meta={[\n              {\n                name: `description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:title`,\n                content: title,\n              },\n              {\n                property: `og:description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:type`,\n                content: `website`,\n              },\n              {\n                name: `twitter:card`,\n                content: `summary`,\n              },\n              {\n                name: `twitter:creator`,\n                content: data.site.siteMetadata.author,\n              },\n              {\n                name: `twitter:title`,\n                content: title,\n              },\n              {\n                name: `twitter:description`,\n                content: metaDescription,\n              },\n            ]\n              .concat(\n                keywords.length > 0\n                  ? {\n                      name: `keywords`,\n                      content: keywords.join(`, `),\n                    }\n                  : []\n              )\n              .concat(meta)}\n          />\n        )\n      }}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  keywords: [],\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n\nconst detailsQuery = graphql`\n  query DefaultSEOQuery {\n    site {\n      siteMetadata {\n        title\n        description\n        author\n      }\n    }\n  }\n`\n"],"sourceRoot":""}