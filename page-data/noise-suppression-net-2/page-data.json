{"componentChunkName":"component---src-templates-blog-post-js","path":"/noise-suppression-net-2/","result":{"data":{"site":{"siteMetadata":{"title":"Web Neural Network API","author":"Belem Zhang"}},"dtl":{"id":"21295582-cdc2-553f-98ba-539b84713fc3","excerpt":"A core abstraction behind popular neural networks is a computational graph, a directed graph with its nodes corresponding to operations (ops) and inputâ€¦","tableOfContents":{"items":[{"url":"#key-scenarios","title":"Key scenarios"}]},"frontmatter":{"date":"Saturday, May 02, 2020","title":"Noise Suppression Net 2 (NSNet2)","avatar":"https://avatars.githubusercontent.com/u/379216?s=200&v=4","author":"Anssi, Chai and Ningxin","tags":"getstarted-web"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Noise Suppression Net 2 (NSNet2)\",\n  \"author\": \"Anssi, Chai and Ningxin\",\n  \"avatar\": \"https://avatars.githubusercontent.com/u/379216?s=200&v=4\",\n  \"date\": \"2020-05-02T23:46:37.121Z\",\n  \"tags\": \"getstarted-web\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"A core abstraction behind popular neural networks is a computational graph, a directed graph with its nodes corresponding to operations (ops) and input variables. One node\\u2019s output value is the input to another node. The WebNN API brings this abstraction to the web.\"), mdx(\"p\", null, \"In the WebNN API, the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://webmachinelearning.github.io/webnn/#operand\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"Operand\")), \" objects represent input, output, and constant multi-dimensional arrays known as \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://mathworld.wolfram.com/Tensor.html\"\n  }, \"tensors\"), \". The \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://webmachinelearning.github.io/webnn/#api-neuralnetworkcontext\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"NeuralNetworkContext\")), \" defines a set of operations that facilitate the construction and execution of this computational graph. Such operations may be accelerated with dedicated hardware such as the GPUs, CPUs with extensions for deep learning, or dedicated ML accelerators. These operations defined by the WebNN API are required by \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/webmachinelearning/webnn/blob/master/op_compatibility/first_wave_models.md\"\n  }, \"models\"), \" that address key application use cases. Additionally, the WebNN API provides affordances to builder a computational graph, compile the graph, execute the graph, and integrate the graph with other Web APIs that provide input data to the graph e.g. media APIs for image or video frames and sensor APIs for sensory data.\"), mdx(\"p\", null, \"This \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://webmachinelearning.github.io/webnn/#examples\"\n  }, \"example\"), \" builds, compiles, and executes a graph comprised of three ops, takes four inputs and returns one output.\"), mdx(\"h2\", {\n    \"id\": \"key-scenarios\"\n  }, \"Key scenarios\"), mdx(\"p\", null, \"There are many important \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://webmachinelearning.github.io/webnn/#usecases-application\"\n  }, \"application use cases\"), \" for high-performance neural network inference. One such use case is deep-learning noise suppression (DNS) in web-based video conferencing. The following sample shows how the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/microsoft/DNS-Challenge/tree/master/NSNet2-baseline\"\n  }, \"NSNet2\"), \" baseline implementation of deep learning-based noise suppression model may be implemented using the WebNN API.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"// Noise Suppression Net 2 (NSNet2) \\n// Baseline Model for Deep Noise Suppression Challenge (DNS) 2021.\\nexport class NSNet2 {\\n  constructor() {\\n    this.model = null;\\n    this.compiledModel = null;\\n    this.frameSize = 161;\\n    this.hiddenSize = 400;\\n  }\\n\\n  async load(baseUrl, batchSize, frames) {\\n    const nn = navigator.ml.getNeuralNetworkContext();\\n    const builder = nn.createModelBuilder();\\n    // Create constants by loading pre-trained data from .npy files.\\n    const weight172 = await buildConstantByNpy(builder, baseUrl + '172.npy');\\n    const biasFcIn0 = await buildConstantByNpy(builder, baseUrl + 'fc_in_0_bias.npy');\\n    const weight192 = await buildConstantByNpy(builder, baseUrl + '192.npy');\\n    const recurrentWeight193 = await buildConstantByNpy(builder, baseUrl + '193.npy');\\n    const bias194 = await buildConstantByNpy(builder, baseUrl + '194_0.npy');\\n    const recurrentBias194 = await buildConstantByNpy(builder, baseUrl + '194_1.npy');\\n    const weight212 = await buildConstantByNpy(builder, baseUrl + '212.npy');\\n    const recurrentWeight213 = await buildConstantByNpy(builder, baseUrl + '213.npy');\\n    const bias214 = await buildConstantByNpy(builder, baseUrl + '214_0.npy');\\n    const recurrentBias214 = await buildConstantByNpy(builder, baseUrl + '214_1.npy');\\n    const weight215 = await buildConstantByNpy(builder, baseUrl + '215.npy');\\n    const biasFcOut0 = await buildConstantByNpy(builder, baseUrl + 'fc_out_0_bias.npy');\\n    const weight216 = await buildConstantByNpy(builder, baseUrl + '216.npy');\\n    const biasFcOut2 = await buildConstantByNpy(builder, baseUrl + 'fc_out_2_bias.npy');\\n    const weight217 = await buildConstantByNpy(builder, baseUrl + '217.npy');\\n    const biasFcOut4 = await buildConstantByNpy(builder, baseUrl + 'fc_out_4_bias.npy');\\n    // Build up the network.\\n    const input = builder.input('input', {type: 'float32', dimensions: [batchSize, frames, this.frameSize]});\\n    const relu20 = builder.relu(builder.add(builder.matmul(input, weight172), biasFcIn0));\\n    const transpose31 = builder.transpose(relu20, {permutation: [1, 0, 2]});\\n    const initialState92 = builder.input('initialState92', {type: 'float32', dimensions: [1, batchSize, this.hiddenSize]});\\n    const [gru94, gru93] = builder.gru(transpose31, weight192, recurrentWeight193, frames, this.hiddenSize,\\n        {bias: bias194, recurrentBias: recurrentBias194, initialHiddenState: initialState92, returnSequence: true});\\n    const squeeze95 = builder.squeeze(gru93, {axes: [1]});\\n    const initialState155 = builder.input('initialState155', {type: 'float32', dimensions: [1, batchSize, this.hiddenSize]});\\n    const [gru157, gru156] = builder.gru(squeeze95, weight212, recurrentWeight213, frames, this.hiddenSize,\\n        {bias: bias214, recurrentBias: recurrentBias214, initialHiddenState: initialState155, returnSequence: true});\\n    const squeeze158 = builder.squeeze(gru156, {axes: [1]});\\n    const transpose159 = builder.transpose(squeeze158, {permutation: [1, 0, 2]});\\n    const relu163 = builder.relu(builder.add(builder.matmul(transpose159, weight215), biasFcOut0));\\n    const relu167 = builder.relu(builder.add(builder.matmul(relu163, weight216), biasFcOut2));\\n    const output = builder.sigmoid(builder.add(builder.matmul(relu167, weight217), biasFcOut4));\\n    this.model = builder.createModel({output, gru94, gru157});\\n  }\\n\\n  async compile(options) {\\n    this.compiledModel = await this.model.compile(options);\\n  }\\n\\n  async compute(inputBuffer, initialState92Buffer, initialState155Buffer) {\\n    const inputs = {\\n      input: {buffer: inputBuffer},\\n      initialState92: {buffer: initialState92Buffer},\\n      initialState155: {buffer: initialState155Buffer},\\n    };\\n    return await this.compiledModel.compute(inputs);\\n  }\\n}\\n\")), mdx(\"p\", null, \"Try the live version of the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://webmachinelearning.github.io/webnn-samples/nsnet2/\"\n  }, \"WebNN NSNet2 example\"), \".  This live version builds upon \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/webmachinelearning/webnn-samples/blob/master/nsnet2/nsnet2.js\"\n  }, \"nsnet2.js\"), \" that implements the above code snippet as a JS module.\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"web":{"edges":[{"node":{"fields":{"slug":"/work-with-onnx.js/"},"frontmatter":{"title":"Work with ONNX.js"}}},{"node":{"fields":{"slug":"/noise-suppression-net-2/"},"frontmatter":{"title":"Noise Suppression Net 2 (NSNet2)"}}}]},"node":{"edges":[{"node":{"fields":{"slug":"/your-first-node.js-app/"},"frontmatter":{"title":"Create Your First Node.js App Powered by WebNN"}}}]},"miniapp":{"edges":[]},"blog":{"edges":[{"node":{"fields":{"slug":"/w3c-launches-the-web-machine-learning-working-group/"},"frontmatter":{"title":"W3C Launches the Web Machine Learning Working Group"}}},{"node":{"fields":{"slug":"/call-for-review-web-ml-wg-charter/"},"frontmatter":{"title":"Call for Review: Web Machine Learning WG Charter"}}}]},"doc":{"edges":[{"node":{"fields":{"slug":"/webnn-native-build-and-run/"},"frontmatter":{"title":"WebNN-Native Build and Run"}}}]},"faq":{"edges":[{"node":{"fields":{"slug":"/faq/"},"frontmatter":{"title":"Web Neural Network API Explained"}}}]}},"pageContext":{"slug":"/noise-suppression-net-2/","previous":null,"next":{"id":"e6d6e13f-9c82-5fc7-b21d-86c8783448c5","fields":{"slug":"/webnn-native-build-and-run/"},"frontmatter":{"title":"WebNN-Native Build and Run"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"WebNN-Native Build and Run\",\n  \"author\": \"Ningxin, Junwei, Bruce and Mingming\",\n  \"avatar\": \"https://avatars.githubusercontent.com/u/1531742?s=460&u=303728b0924bbf19eecb9ab967a2f0df41e71d76&v=4\",\n  \"date\": \"2020-09-27T23:46:37.121Z\",\n  \"tags\": \"doc\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"WebNN Native is a native implementation of the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://webmachinelearning.github.io/webnn/\"\n  }, \"Web Neural Network API\"), \".\"), mdx(\"p\", null, \"It provides several building blocks:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"WebNN C/C++ headers\"), \" that applications and other building blocks use.\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"webnn.h\"), \" that is an one-to-one mapping with the WebNN IDL.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A C++ wrapper for the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"webnn.h\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Backend implementations\"), \" that use platforms\\u2019 ML APIs:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"DirectML\"), \" on Windows 10\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"OpenVINO\"), \" on Windows 10 and Linux\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Other backends are to be added\"))))), mdx(\"p\", null, \"WebNN Native uses the code of other open source projects:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The code generator and infrastructure code of \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://dawn.googlesource.com/dawn/\"\n  }, \"Dawn\"), \" project.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The DirectMLX and device wrapper of \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/microsoft/DirectML\"\n  }, \"DirectML\"), \" project.\")), mdx(\"h2\", {\n    \"id\": \"build-and-run\"\n  }, \"Build and Run\"), mdx(\"h3\", {\n    \"id\": \"install-depot_tools\"\n  }, \"Install \", mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"depot_tools\")), mdx(\"p\", null, \"WebNN Native uses the Chromium build system and dependency management so you need to \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://commondatastorage.googleapis.com/chrome-infra-docs/flat/depot_tools/docs/html/depot_tools_tutorial.html#_setting_up\"\n  }, \"install depot_tools\"), \" and add it to the PATH.\"), mdx(\"h3\", {\n    \"id\": \"get-the-code\"\n  }, \"Get the code\"), mdx(\"p\", null, \"Get the source code as follows:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"# Clone the repo as \\\"webnn-native\\\"\\n> git clone https://github.com/webmachinelearning/webnn-native.git webnn-native && cd webnn-native\\n\\n# Bootstrap the gclient configuration\\n> cp scripts/standalone.gclient .gclient\\n\\n# Fetch external dependencies and toolchains with gclient\\n> gclient sync\\n\")), mdx(\"h3\", {\n    \"id\": \"setting-up-the-build\"\n  }, \"Setting up the build\"), mdx(\"p\", null, \"Generate build files using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gn args out/Debug\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gn args out/Release\"), \".\"), mdx(\"p\", null, \"A text editor will appear asking build options, the most common option is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"is_debug=true/false\"), \"; otherwise \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gn args out/Release --list\"), \" shows all the possible options.\"), mdx(\"p\", null, \"To build with DirectML backend, set build option \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"webnn_enable_dml=true\"), \".\"), mdx(\"p\", null, \"To build with OpenVINO backend, set build option \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"webnn_enable_openvino=true\"), \".\"), mdx(\"h3\", {\n    \"id\": \"build\"\n  }, \"Build\"), mdx(\"p\", null, \"Then use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ninja -C out/Release\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ninja -C out/Debug\"), \" to build WebNN Native.\"), mdx(\"h3\", {\n    \"id\": \"run-tests\"\n  }, \"Run tests\"), mdx(\"p\", null, \"Run unit tests, for example \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"./out/Release/webnn_unittests\"), \".\"), mdx(\"p\", null, \"Run end2end tests, for example \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"./out/Release/webnn_end2end_tests\"), \".\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Notes\"), \":\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"For OpenVINO backend, please \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.openvinotoolkit.org/2021.2/openvino_docs_install_guides_installing_openvino_linux.html#install-openvino\"\n  }, \"install 2021.2 version\"), \" and \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.openvinotoolkit.org/2021.2/openvino_docs_install_guides_installing_openvino_linux.html#set-the-environment-variables\"\n  }, \"set the environment variables\"), \" before running the end2end tests.\")), mdx(\"h3\", {\n    \"id\": \"run-examples\"\n  }, \"Run examples\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/webnn-website/examples/LeNet/README.md\"\n  }, \"LeNet\"))), mdx(\"h2\", {\n    \"id\": \"license\"\n  }, \"License\"), mdx(\"p\", null, \"Apache 2.0 Public License, please see \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/webnn-website/LICENSE\"\n  }, \"LICENSE\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;"}}},"staticQueryHashes":["3128451518"]}